/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 Класс Queue<T> представляет обычную очередь, которая работает по алгоритму FIFO 
 ("первый вошел - первый вышел").
*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/* Создание очереди
Для создания очереди можно использовать один из трех ее конструкторов.
Прежде всего можно создать пустую очередь:
 */
 Queue<string> people = new Queue<string>();
 /* При создании пустой очереди можно указать емкость очереди: */

Queue<string> people2 = new Queue<string>(16);

/* Также можно инициализировать очередь элементами из другой коллекции или массивом: */

var employees = new List<string> { "Tom", "Sam", "Bob" };
Queue<string> people3 = new Queue<string>(employees);
foreach (var person in people3) Console.WriteLine(person);
 
Console.WriteLine(people3.Count); // 3

/* Для перебора очереди можно использовать стандартный цикл foreach.
Для получения количества элементов в очереди в классе определено свойство Count. */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/* Методы Queue
У класса Queue<T> можно отметить следующие методы:
void Clear(): очищает очередь
bool Contains(T item): возвращает true, если элемент item имеется в очереди
T Dequeue(): извлекает и возвращает первый элемент очереди
void Enqueue(T item): добавляет элемент в конец очереди
T Peek(): просто возвращает первый элемент из начала очереди без его удаления
Посмотрим применение очереди на практике: */







/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */