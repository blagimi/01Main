using АбстрактныеКлассы;
/*
 * Абстрактные классы и члены классов.
 * Некоторые сущности, которые мы хотим выразить с помощью языка программирования, 
 * могут не иметь конкретного воплощения. Например, в реальности не существует 
 * геометрической фигуры как таковой. Есть круг, прямоугольник, квадрат, но просто 
 * фигуры нет. Однако же и круг, и прямоугольник имеют что-то общее и являются фигурами.
 * И для описания подобных сущностей, которые не имеют конкретного воплощения, 
 * предназначены абстрактные классы.
 */

/* 
 * Абстрактный класс похож на обычный класс. Он также может иметь переменные, методы, 
 * конструкторы, свойства. Единственное, что при определении абстрактных классов 
 * используется ключевое слово abstract.
 */

/*
 * Но главное отличие абстрактных классов от обычных состоит в том, 
 * что мы НЕ можем использовать конструктор абстрактного класса для создания 
 * экземпляра класса. Например, следующим образом:
 */
// Transport tesla = new Transport(); Ошибка

/* 
 * Тем не менее абстрактные классы полезны для описания некоторого общего функционала, 
 * который могут наследовать и использовать производные классы:
 */
Transport car = new Car();
Transport ship = new Ship();
Transport aircraft = new Aircraft();
/* 
 * В данном случае от класса Transport наследуются три класса, которые представляют 
 * различные типы транспортных средств. Тем не менее они имеют общую черту - они 
 * могут перемещаться с помощью метода Move()
 */
car.Move();
ship.Move();
aircraft.Move();