using СписокListT;
/*
 * Хотя в языке C# есть массивы, которые хранят в себе наборы однотипных объектов
 * , но работать с ними не всегда удобно. Например, массив хранит фиксированное 
 * количество объектов, однако что если мы заранее не знаем, сколько нам потребуется
 * объектов. И в этом случае намного удобнее применять коллекции. Еще один плюс 
 * коллекций состоит в том, что некоторые из них реализует стандартные структуры 
 * данных, например, стек, очередь, словарь, которые могут пригодиться для решения 
 * различных специальных задач. Большая часть классов коллекций содержится в 
 * пространстве имен System.Collections.Generic.Класс List<T> из пространства 
 * имен System.Collections.Generic представляет простейший список однотипных 
 * объектов. Класс List типизируется типом, объекты которого будут хранится
 * в списке.Мы можем создать пустой список:
 */
List<string> people = new List<string>();

/*
 * В данном случае объект List типизируется типом string. А это значит, что хранить
 * в этом списке мы можем только строки.Можно сразу при создании списка инициализировать
 * его начальными значениями. В этом случае элементы списка помещаются после вызова
 * конструктора в фигурных скобках
 */

List<string> people2 = new List<string>() { "Tom", "Bob", "Sam" };

/*
 * В данном случае в список помещаются три строки Также можно при создании списка
 * инициализировать его элементами из другой коллекции, например, другого списка:
 */

var people3 = new List<string>() { "Tom", "Bob", "Sam" };
var employees = new List<string>(people3);


/* 
 * Можно совместить оба способа:
 */


var people4 = new List<string>() { "Tom", "Bob", "Sam" };
var employees2 = new List<string>(people) { "Mike" };

/*
 *  В данном случае в списке employees будет четыре элемента 
 *  ({ "Tom", "Bob", "Sam", "Mike" }) - три добавляются из списка people и один
 *  элемент задается при инициализации. Начиная с версии C# 12 для определения 
 *  списков можно использовать выражения коллекций, которые предполагают 
 *  заключение элементов коллекции в квадратные скобки:
 */

List<string> people5 = ["Tom", "Bob", "Sam"];
List<string> employees3 = [];// пустой список

/* Подобным образом можно работать со списками других типов, например: */

List<Person> people7 = new List<Person>()
{
    new Person("Tom"),
    new Person("Bob"),
    new Person("Sam")
};

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Установка начальной емкости списка.
 * Еще один конструктор класса List принимает в качестве параметра начальную емкость списка:
 * Указание начальной емкости списка позволяет в будущем увеличить производительность и уменьшить издержки на выделение памяти при добавлении элементов. Поскольку динамическое добавление в список может приводить на низком уровне к дополнительному выделению памяти, что снижает производительность. Если же мы знаем, что список не будет превышать некоторый размер, то мы можем передать этот размер в качестве емкости списка и избежать дополнительных выделений памяти.
 * Также начальную емкость можно установить с помощью свойства Capacity, которое имеется у класса List.
 */
List<string> people6 = new List<string>(16);