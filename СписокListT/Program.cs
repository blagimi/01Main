/*
 * Хотя в языке C# есть массивы, которые хранят в себе наборы однотипных объектов
 * , но работать с ними не всегда удобно. Например, массив хранит фиксированное 
 * количество объектов, однако что если мы заранее не знаем, сколько нам потребуется
 * объектов. И в этом случае намного удобнее применять коллекции. Еще один плюс 
 * коллекций состоит в том, что некоторые из них реализует стандартные структуры 
 * данных, например, стек, очередь, словарь, которые могут пригодиться для решения 
 * различных специальных задач. Большая часть классов коллекций содержится в 
 * пространстве имен System.Collections.Generic.Класс List<T> из пространства 
 * имен System.Collections.Generic представляет простейший список однотипных 
 * объектов. Класс List типизируется типом, объекты которого будут хранится
 * в списке.Мы можем создать пустой список:
 */
List<string> people = new List<string>();

/*
 * В данном случае объект List типизируется типом string. А это значит, что хранить
 * в этом списке мы можем только строки.Можно сразу при создании списка инициализировать
 * его начальными значениями. В этом случае элементы списка помещаются после вызова
 * конструктора в фигурных скобках
 */

List<string> people2 = new List<string>() { "Tom", "Bob", "Sam" };

/*
 * В данном случае в список помещаются три строки Также можно при создании списка
 * инициализировать его элементами из другой коллекции, например, другого списка:
 */

var people3 = new List<string>() { "Tom", "Bob", "Sam" };
var employees = new List<string>(people3);


/* 
 * Можно совместить оба способа:
 */


var people4 = new List<string>() { "Tom", "Bob", "Sam" };
var employees2 = new List<string>(people) { "Mike" };