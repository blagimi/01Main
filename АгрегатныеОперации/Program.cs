/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*

К агрегатным операциям относят различные операции над выборкой, например, получение числа элементов,
получение минимального, максимального и среднего значения в выборке, а также суммирование значений.

*/
#region Метод Aggregate

/*
Метод Aggregate выполняет общую агрегацию элементов коллекции в зависимости от указанного выражения. 
Например:

*/

static void Example()
{
    int[] numbers = { 1, 2, 3, 4, 5};
    
    int query = numbers.Aggregate((x,y)=> x - y);
    Console.WriteLine(query);   // -13
}

Example();

/*
Переменная query будет представлять результат агрегации массива. В качестве условия агрегации 
используется выражение (x,y)=> x - y, то есть вначале из первого элемента вычитается второй, 
потом из получившегося значения вычитается третий и так далее. То есть будет эквивалентно выражению:

int query = 1 - 2 - 3 - 4 - 5
В итоге мы получим число -13. Соответственно мы бы могли использовать любые другие операции, 
например, сложение:

int query = numbers.Aggregate((x,y)=> x + y); // аналогично 1 + 2 + 3 + 4 + 5
Еще одна версия метода позволяет задать начальное значение, с которого начинается цепь агрегатных операций:

string[] words = { "Gaudeamus", "igitur", "Juvenes", "dum", "sumus" };
var sentence = words.Aggregate("Text:", (first, next) => $"{first} {next}");
 
Console.WriteLine(sentence);  // Text: Gaudeamus igitur Juvenes dum sumus
В данном случае объединяются все элементы массива words, но первым элемент агрегатной 
операции будет строка "Text:".


*/

#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
