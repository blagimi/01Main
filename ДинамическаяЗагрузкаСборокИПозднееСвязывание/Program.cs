
/*

При создании приложения для него определяется набор сборок, которые будут использоваться. 
В проекте указываются ссылки на эти сборки, и когда приложение выполняется, при 
обращении к функционалу этих сборок они автоматически подгружаются.

Но также мы можем сами динамически подгружать другие сборки, на которые в проекте 
нет ссылок.

Для управления сборками в пространстве имен System.Reflection имеется класс Assembly. 
С его помощью можно загружать сборку, исследовать ее.

Чтобы динамически загрузить сборку в приложение, надо использовать статические методы 
Assembly.LoadFrom() или Assembly.Load().

Метод LoadFrom() принимает в качестве параметра путь к сборке.

Допустим, у нас есть два проекта:

Пусть в проекте MyApp, который компилируется в сборку MyApp.dll, имеется файл 
Program.cs со следующим кодом:

Person tom = new Person("Tom");
Console.WriteLine($"Hello, {tom.Name}");
 
class Person
{
    public string Name { get; }
    public Person(string name) => Name = name;
}
В другом проект исследуем сборку MyApp.dll на наличие в ней различных типов:

using System.Reflection;
 
Assembly asm = Assembly.LoadFrom("MyApp.dll");
 
Console.WriteLine(asm.FullName);
// получаем все типы из сборки MyApp.dll
Type[] types = asm.GetTypes();
foreach (Type t in types)
{
    Console.WriteLine(t.Name);
}
В данном случае для исследования указывается сборка MyApp.dll. Здесь использован 
относительный путь, так как сборка находится в одной папке с приложением - в проекте 
в каталоге bin/Debug/net6.x. Можно в принципе в качестве имени указать и имя текущего 
приложение. В этом случае программа будет исследовать саму себя. В любом случае стоит 
учитывать, что загрузке подлежат (по крайней мере в .NET 6.0) сборки с расширением dll, 
но не exe.

И в моем случае я получу следующий консольный вывод:

MyApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
EmbeddedAttribute
NullableAttribute
NullableContextAttribute
Program
Person
Как видно из вывода, полное название сборки: MyApp, Version=1.0.0.0, Culture=neutral, 
PublicKeyToken=null. А сама сборка MyApp.dll содержит пять типов - кроме класса Person 
и неявно определяемого класса Program добавляется еще три автоматически 
генерируемых класса.

Метод Load() действует аналогично, только в качестве его параметра передается 
дружественное имя сборки, которое нередко совпадает с именем приложения: 
Assembly asm = Assembly.Load("MyApp");

Получив все типы сборки с помощью метода GetTypes(), мы опять же можем применить к 
каждому типу все те методы, которые были рассмотрены в прошлой теме.

*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
