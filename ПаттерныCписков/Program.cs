
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Паттерны списков (list pattern) позволяют сопоставлять выражения со списками и 
 * массивами. Данный паттерн пока доступен начиная с версии C# 11.Полное совпадение 
 * с массивом/списком:
 */

Console.WriteLine(GetNumber([1, 2, 3, 4, 5]));  // 1
Console.WriteLine(GetNumber([1, 2]));           // 3
Console.WriteLine(GetNumber([]));               // 4
Console.WriteLine(GetNumber([1, 2, 5]));        // 5

static int GetNumber(int[] values) => values switch
{
[1, 2, 3, 4, 5] => 1,
[1, 2, 3] => 2,
[1, 2] => 3,
[] => 4,
    _ => 5
};

/*
 * Аналогично вместо массивов можно применять списки:
 */

List<int> numbers = [1, 2, 3];

Console.WriteLine(GetNumber2(numbers));  // 2

int GetNumber2(List<int> values) => values switch
{
[1, 2, 3, 4, 5] => 1,
[1, 2, 3] => 2,
[1, 2] => 3,
[] => 4,
    _ => 5
};

/*
 * Аналогичным образом паттерны списков можно использовать в конструкции if:
 */

int[] numbers2 = { 1, 2, 3, 4, 5 };
if (numbers2 is [1, 2, 3, 4, 5])
{
    Console.WriteLine("[1, 2, 3, 4, 5]");
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Подстановка
 * С помощью паттерна _ можно обозначить одиночный элемент, который имеет любое значение.
 * Например, паттерн [2, _, 5] соответствует любому массиву из трех элементов, в котором 
 * между 2 и 5 располагается произвольное значение. А массив [_, _] соответствует любому 
 * массиву из двух произвольных элементов
 */

Console.WriteLine(GetNumber3(new[] { 2, 3, 5 }));       // 1
Console.WriteLine(GetNumber3(new[] { 2, 4, 6 }));      // 2
Console.WriteLine(GetNumber3(new[] { 1, 2, 5 }));      // 3
Console.WriteLine(GetNumber3(new[] { 1, 2, 3 }));      // 4
Console.WriteLine(GetNumber3(new int[] { }));         // 5

int GetNumber3(int[] values) => values switch
{
[2, _, 5] => 1,
[2, _, _] => 2,
[_, _, 5] => 3,
[_, _, _] => 4,
    _ => 5
};

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/*
 * slice-паттерн
 * Для передачи произвольного количества элементов массива/списка применяется
 * slice-паттерн ... Например, паттерн [1, 2, .., 5] соответствует массиву, в который
 * начинается на 1, за которым идет 2. А последний элемент в массиве - 5. При этом между 
 * 2 и 5 может располагаться произвольное количество произвольных целых чисел. То есть
 * паттерн [1, 2, .., 5] будет соответствовать таким массивам как
 */

int[] arr1 = { 1, 2, 3, 4, 5 };
int[] arr2 = { 1, 2, 5 };
int[] arr3 = { 1, 2, 66, 77, 88, 5 };

/*
 * С помощью паттерна .. можно задавать произвольное количество элементов как в 
 * начале, так и в конце массива/списка. Например, паттерн [2,..] представляет
 * массив, который начинается на 2. А паттерн [.., 5] представляет массив, который 
 * заканчивается элементом 5. Паттерн [..] представляет массив, который содержит 
 * произвольное количество элементов. Например
 */

Console.WriteLine(GetNumber4(new[] { 2, 5 }));           // 1
Console.WriteLine(GetNumber4(new[] { 2, 3, 4, 5 }));     // 1

Console.WriteLine(GetNumber4(new[] { 2 }));               // 2
Console.WriteLine(GetNumber4(new[] { 2, 3, 4 }));         // 2

Console.WriteLine(GetNumber4(new[] { 3, 4, 5 }));          // 3
Console.WriteLine(GetNumber4(new[] { 5 }));              // 3

Console.WriteLine(GetNumber4(new int[] { }));           // 4
Console.WriteLine(GetNumber4(new[] { 1 }));              // 4
Console.WriteLine(GetNumber4(new[] { 1, 2, 3 }));        // 4

int GetNumber4(int[] values) => values switch
{
[2, .., 5] => 1,    // если первый элемент - 2, а последний - 5
[2, ..] => 2,        // если первый элемент - 2
[.., 5] => 3,       // если последний элемент - 5
[..] => 4          // произвольное количество элементов
};

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */