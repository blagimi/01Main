/*
 * С делегатами тесно связаны анонимные методы. Анонимные методы используются 
 * для создания экземпляров делегатов.Определение анонимных методов начинается 
 * с ключевого слова delegate, после которого идет в скобках список параметров 
 * и тело метода в фигурных скобках:
 * delegate(параметры)
 * {
 *    // инструкции
 * }
 */
/*
 * Анонимный метод не может существовать сам по себе, он используется для
 * инициализации экземпляра делегата, как в данном случае переменная handler 
 * представляет анонимный метод. И через эту переменную делегата можно вызвать
 * данный анонимный метод.
 */
MessageHandler handler = delegate (string mes)
{
    Console.WriteLine(mes);
};
handler("hello world!");

ShowMessage("hello!", delegate (string mes)
{
    Console.WriteLine(mes);
});

static void ShowMessage(string message, MessageHandler handler)
{
    handler(message);
}

/*
 * Если анонимный метод использует параметры, то они должны соответствовать
 * параметрам делегата. Если для анонимного метода не требуется параметров,
 * то скобки с параметрами опускаются. При этом даже если делегат принимает 
 * несколько параметров, то в анонимном методе можно вовсе опустить параметры:
 */
MessageHandler handler2 = delegate
{
    Console.WriteLine("анонимный метод");
};
handler2("hello world!");    // анонимный метод
/*
 * При этом параметры анонимного метода не могут быть опущены, если один или 
 * несколько параметров определены с модификатором out.Также, как и обычные
 * методы, анонимные могут возвращать результат:
 */
Operation operation = delegate (int x, int y)
{
    return x + y;
};
int result = operation(4, 5);
Console.WriteLine(result);       // 9
/*
 * При этом анонимный метод имеет доступ ко всем переменным, определенным 
 * во внешнем коде:
 */
int z = 8;
Operation operation2 = delegate (int x, int y)
{
    return x + y + z;
};
int result2 = operation2(4, 5);
Console.WriteLine(result2);       // 17

delegate void MessageHandler(string message);
delegate int Operation(int x, int y);

/*
 * Другой пример анонимных методов - передача в качестве аргумента для параметра, 
 * который представляет делегат:
 */

/*
 * В каких ситуациях используются анонимные методы? Когда нам надо определить 
 * однократное действие, которое не имеет много инструкций и нигде больше не 
 * используется. В частности, их можно использовать для обработки событий,
 * которые будут рассмотрены далее.
 */

