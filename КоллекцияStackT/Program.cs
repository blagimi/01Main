/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/* Коллекция Stack<T>
Класс Stack<T> представляет коллекцию, которая использует алгоритм LIFO 
("последний вошел - первый вышел"). При такой организации каждый следующий добавленный
элемент помещается поверх предыдущего. Извлечение из коллекции происходит в обратном
порядке - извлекается тот элемент, который находится выше всех в стеке.
Стек - довольно часто встречаемая структура данных в реальной жизни. Банальные 
примеры стеков - стопка книг или тарелок, где каждую новую книгу или тарелку
помещают поверх предыдущей. А извлекают из этой стопки книги/тарелки в обратном 
порядке - сначала самую верхнюю и так далее. Другой пример - одежда: допустим, 
человек выходит на улицу в зимнюю погоду и для этого сначала одевает майку, 
потом рубашку, затем свитер, и в конце куртку. Когда человек снимает с 
себя одежду - он делает это в обратном порядке: сначала снимает куртку,
потом свитер и так далее.
*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/* Создание стека
Для создания стека можно использовать один из трех конструкторов.
Прежде всего можно создать пустой стек */

Stack<string> people = new Stack<string>();

/* При создании пустого стека можно указать емкость стека: */

Stack<string> people2 = new Stack<string>(16);

/* Также можно инициализировать стек элементами из другой коллекции или массивом: */

var employees = new List<string> { "Tom", "Sam", "Bob" };
Stack<string> people3 = new Stack<string>(employees);
foreach (var person in people3) Console.WriteLine(person);
 
Console.WriteLine(people3.Count); // 3

/* Для перебора стека можно использовать стандартный цикл foreach. Причем в цикле в 
соответствии с аалгоритмом стека LIFO данные извлекаются в порядке, обратном их 
добавлению. Консольный вывод в данном случае:

Bob
Sam
Tom
3

Для получения количества элементов стека применяется свойство Count. */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */