using ВозвращениеРезультатаИзАсинхронногоМетода;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*

В качестве возвращаемого типа в асинхронном методе должны использоваться типы void, Task, Task<T> или ValueTask<T>

*/

#region void 

/*

При использовании ключевого слова void асинхронный метод ничего не возвращает:

*/
async static void Example()
{
    PrintAsync("Hello World");
    PrintAsync("Hello METANIT.COM");
    
    Console.WriteLine("Main End");
    await Task.Delay(3000); // ждем завершения задач
    
    // определение асинхронного метода
    async void PrintAsync(string message)
    {
        await Task.Delay(1000);     // имитация продолжительной работы
        Console.WriteLine(message);
    }   
}

Example();

/*

Однако асинхронных void-методов следует избегать и следует использовать только там, где эти подобные методы 
представляют единственный возможный способ определения асинхронного метода. Прежде всего, мы не можем 
применить к подобным методам оператор await. Также потому что исключения в таких методах сложно обрабатывать, 
так как они не могут быть перехвачены вне метода. Кроме того, подобные void-методы сложно тестировать.

Тем не менее есть ситуации, где без подобных методов не обойтись - например, при обработке событий:

*/

async static void Example2()
{
    Account account = new Account();
    account.Added += PrintAsync;
    
    account.Put(500);
    
    await Task.Delay(2000); // ждем завершения
    
    // определение асинхронного метода
    async void PrintAsync(object? obj, string message)
    {
        await Task.Delay(1000);     // имитация продолжительной работы
        Console.WriteLine(message);
    }

}

Example2();

/*

В данном случае событие Added в классе Account представляет делегат EventHandler, который имеет тип void. 
Соответственно под это событие можно определить только метод-обработчик с типом void.

*/

#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */