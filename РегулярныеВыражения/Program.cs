using System.Text.RegularExpressions;

/*
Классы StringBuilder и String предоставляют достаточную функциональность для работы
со строками. Однако .NET предлагает еще один мощный инструмент - регулярные 
выражения. Регулярные выражения представляют эффективный и гибкий метод по 
обработке больших текстов, позволяя в то же время существенно уменьшить объемы 
кода по сравнению с использованием стандартных операций со строками.

Основная функциональность регулярных выражений в .NET сосредоточена в пространстве
имен System.Text.RegularExpressions. А центральным классом при работе с регулярными
выражениями является класс Regex. Например, у нас есть некоторый текст и нам надо
найти в нем все словоформы какого-нибудь слова. С классом Regex это сделать очень
просто:
*/

string s = "Бык тупогуб, тупогубенький бычок, у быка губа бела была тупа";
Regex regex = new Regex(@"туп(\w*)");
MatchCollection matches = regex.Matches(s);
if (matches.Count > 0)
{
    foreach (Match match in matches)
        Console.WriteLine(match.Value);
}
else
{
    Console.WriteLine("Совпадений не найдено");
}
/*
Здесь мы находим в искомой строке все словоформы слова "туп". В конструктор объекта
Regex передается регулярное выражение для поиска. Далее мы разберем некоторые элементы
синтаксиса регулярных выражений, а пока достаточно знать, что выражение туп(\w*) 
обозначает, найти все слова, которые имеют корень "туп" и после которого может 
стоять различное количество символов. Выражение \w означает алфавитно-цифровой 
символ, а звездочка после выражения указывает на неопределенное их количество - их
может быть один, два, три или вообще не быть.

Метод Matches класса Regex принимает строку, к которой надо применить регулярные 
выражения, и возвращает коллекцию найденных совпадений.

Каждый элемент такой коллекции представляет объект Match. Его свойство Value 
возвращает найденное совпадение.

И в данном случае мы получим следующий консольный вывод

тупогуб
тупогубенький
тупа
*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


#region Параметр RegexOptions
#endregion

#region Синтаксис регулярных выражений
#endregion

#region Проверка на соответствие строки формату
#endregion

#region Замена и метод Replace
#endregion


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */