/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*
 * Интерфейсы.
 * Интерфейс представляет ссылочный тип, которы может определять некоторый функционал
 * набор методов и свойств без реализации. Затем этот функционал реализуют классы и 
 * структуры, которые применяют данные интерфейсы.
 */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Определение интерфейса.
 * Для определения интерфейса используется ключевое слово interface. Названия указываются
 * с заглавной буквы I, например, IComparable. Интерфейсы могут определять следующие 
 * сущности:
 * - Методы
 * - Свойства
 * - Индексаторы
 * - События
 * - Статические поля и константы
 * Интерфейсы НЕ могут определять НЕстатические переменные.
 * Интрейфес IMovable представляет некий движущийся объект. Он описывает возможности
 * движущегося объекта, т.е функционал, который у него должен быть. Методы  и свойства
 * могут не иметь реализации, в этом они похожи на абстрактные методы и свойствами 
 * абстрактных классов. В данном случае интерфейс определяет метод Move который будет
 * представлять передвижение. Он не имеет реализации, не принимает никаких параметров
 * и ничего не возвращает. То же самое касается и свойства Name, оно похоже на 
 * автоматическое свойство. Но в реальности это определение свойства в интерфейсе,
 * которое не имеет реализации, а не автосвойство.
 */
Console.WriteLine(IMovable.maxSpeed);   // 60

Console.WriteLine(IMovable3.MaxSpeed);  // 60
IMovable3.MaxSpeed = 65;
Console.WriteLine(IMovable3.MaxSpeed);  // 65
double time = IMovable3.GetTime(500, 10);
Console.WriteLine(time);                // 50
interface IMovable
{
    // Константа
    const int minSpeed = 0;         // Минимальная скорость
    // Статическая переменная
    static int maxSpeed = 60;       // Максимальная скорость
    // Метод
    void Move();                    // Движение
    // Свойство
    string Name { get; set; }       // Название
    //Определение делегата для события
    delegate void MoveHandler(string message);
    // Событие
    event MoveHandler MoveEvent;    // Событие движения
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Модификаторы доступа.
 * Если члены-методы и свойства интерфеса не имеют модификаторы доступа, то по умолчанию
 * являются public, так как их цель определение функционала для реализации его классом.
 * Это касается также констант и статических переменных, которые в класса и структурах по
 * умолчанию подификатор private. В интерфейсах по умолчанию они public. 
 * Поэтому к ним можно обратиться 
 * Console.WriteLine(IMovable.maxSpeed) // 60
 * Сами интерфейсы по умолчанию имееют модификатор доступа internal как и классы. Они 
 * доступны только внутри текущего проекта.
 */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
 * Реализация по умолчанию.
 * Интерфейсы поддерживают реализацию методов и свойств по умолчанию. В них можно 
 * определить полноценные методы и свойства, которые имеют реализацию как в обычных 
 * классах и структурах. С реализацией свойст по умолчанию дело обстоит сложнее т.к
 * нельзя определять нестатические переменные, соответсвенно в них нельзя манипулировать
 * состоянием объекта. Но реализацию по умолчанию можно определить.
 */
interface IMovable2
{
    void Move()
    {
        Console.WriteLine("Walking");
    }
    int MaxSpeed { get { return 0; } }
}

/*
 * Если интерфейс имеет приватные методы и свойства то они ДОЛЖНЫ иметь реализацию по умолчанию.
 * То же самое относится к статическим методам (не обязательно приватным)
 */
interface IMovable3
{
    // Минимальная скорость
    const int minSpeed = 0;
    // Максимальная скорость
    private static int maxSpeed = 60;
    // Находим время, за которое надо пройти расстояние со скоростью
    static double GetTime(double distance, double speed) => distance / speed;
    static int MaxSpeed
    {
        get => maxSpeed;
        set
        {
            if (value > 0) maxSpeed = value;
        }
    }
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */