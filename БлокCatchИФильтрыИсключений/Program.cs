/* 
 * Определение блока catch.
 * За обработку исключения отвечает блок catch. Обрабатывает любое исключение, которое возникло в блоке try. 
 * Обрабатывает только те исключения, которые соответствуют типу, указаному в скобках после оператора catch.
 * Например, обработаем только исключения типа DivideByZeroException.
 */

try
{
    int x = 5;
    int y = x / 0;
    Console.WriteLine($"{y}");
}
/*
 * Однако если в блоке try возникнут исключения каких-то других типов, отличных от DivideByZeroException, то они не будут обработаны.
 * Можно сохранить всю информацию об исключении в переменную.
 */
catch (DivideByZeroException divZeroEx)
{
    Console.WriteLine($"Исключение {divZeroEx.Message}");
}
/*
 * Фильтры исключений.
 * Фильтры исключений позволяют обрабатывать исключения в зависимости от определенных условий. 
 * Для их применения после выражения catch идет выражение when, после которого в скобках указывается условие.
 */
int x1 = 1;
int y1 = 0;
/*
 * В данном случае будет выброшено исключение, так как y=0. Здесь два блока catch, и оба они обрабатывают исключения 
 * типа DivideByZeroException, то есть по сути все исключения, генерируемые при делении на ноль. Но поскольку для 
 * первого блока указано условие y == 0, то именно этот блок будет обрабатывать данное исключение - условие,
 * указанное после оператора when возвращает true. Если поменять значения переменных местами то будет выполняться
 * второе исключение т.к условие будет false.
 */
try
{
    int result1 = x1 / y1;
    int result2 = y1 / x1;
}
catch (DivideByZeroException) when (y1==0)
{
    Console.WriteLine("y1 не должен быть равен 0");
}
catch (DivideByZeroException)
{
    Console.WriteLine("Исключение");
}