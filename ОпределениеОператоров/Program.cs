using ОпределениеОператоров;
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*
* Наряду с методами в классах и структурах можно также определять операторы.
* Данный класс представляет счетчик, значение которого хранится в свойстве Value.
* Есть два объекта класса Counter - два счетчика, которые мы хотим сравнивать или 
* складывать на основании их свойства value, используя стандартные операции сравнения
* и сложения.
* На данный момент операции сравнения или сложения для объектов не доступны. Эти операции
* могут использоваться для примитивных типов. По умолчанию можно складывать числовые
* значения, но как складывать объекты комплексных типов - классов и структур компилятор
* не знает. Для этого нужно использовать перезагрузку операторов.
                                                                |   Counter
*/
Counter counter1 = new () { Value = 23 };
Counter counter2 = new () { Value = 45 };
bool result = counter1 > counter2;
Console.WriteLine(result);              //  false
/*
* Определение операторов заключается в оперделении в классе, для объектов которого
* мы хотим определить оператор, специального метода
* public static возвращаемый_тип operator оператор(Параметры) {}
Этот метод должен иметь модификаторы public static, так как перегружаемый оператор
будет использоваться для всех объектов данного класса. Далее название типа, это тот
тип который мы хотим получить. К примеру при сложении 2х объектов counter мы хотим
получить объект типа bool, который указывает истино или ложно условное выражение.
Но типы могут быть любыми, в зависимости от задачи. Затем вместо называния метода
идет ключевое слово operator и собственно сам оператор. Далее в скобках параметры.
Бинарные операторы принимают 2 параметра, унарные один. В любом случае один из 
параметров должен представлять тот тип класс или структуру, в котором определяется
оператор.
В примере все операторы - бинарные поэтому в каждой перегрузке по 2 параметра.
В результате мы получаем новый объект Counter в качестве возвращаемого типа.
*/
Counter counter3 = counter1 + counter2;
Console.WriteLine(counter3.Value);      //  23 + 45 = 68

/*
Так как перегруженный для определения оператор представляет собой метод, то этот
метод можно так же перегрузить, т.е создать еще одну версию. Данный метод складывает
значение свойства Value и некоторое число, возвращая их сумму.
*/
Counter counter4 = new() {Value = 23};
int result2 = counter4 + 27;            
Console.WriteLine(result2);                    //  50
/*
Не все операторы можно определить. 
унарные операторы +x, -x, !x, ~x, ++, --, true, false
бинарные операторы +, -, *, /, %
операции сравнения ==, !=, <, >, <=, >=
поразрядные операторы &, |, ^, <<, >>
логические операторы &&, ||
Кроме того, есть несколько операторов, которые надо определять парами:
== и !=
< и >
<= и >=
И есть ряд операторов, которые нельзя перегрузить, например, операцию равенства = 
или тернарный оператор ?:, а также ряд других. Полный список перегружаемых операторов 
можно найти в документации msdn
*/
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
Console.ReadLine();