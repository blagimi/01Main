using ВиртуальныеМетодыИСвойства;

/* При наследовании нередко возникает необходимость изменить в классе-наследнике функционал метода, который 
 * был унаследован от базового класса. В этом случае класс-наследник может переопределять методы и свойства 
 * базового класса.
 */

/* Те методы и свойства, которые мы хотим сделать доступными для переопределения, в базовом классе помечается 
 * модификатором virtual. Такие методы и свойства называют виртуальными.
 * А чтобы переопределить метод в классе-наследнике, этот метод определяется с модификатором override. 
 * Переопределенный метод в классе-наследнике должен иметь тот же набор параметров, что и виртуальный 
 * метод в базовом классе.
 */
Person bob = new("Bob",116);
Employee tom = new("Tom",16, "Microsoft");
bob.PersonPrint();
tom.PersonPrint();

/*
 * Можно определить класс Manager, который будет производным от Employee, и в нем также переопределить метод PersonPrint.
 * При переопределении виртуальных методов следует учитывать ряд ограничений:
 * 1) Виртуальный и переопределенный методы должны иметь один и тот же модификатор доступа. 
 * То есть если виртуальный метод определен с помощью модификатора public, то и переопредленный метод 
 * также должен иметь модификатор public.
 * 2) Нельзя переопределить или объявить виртуальным статический метод.
 */

/* 
 * Ключевое слово base
 * Кроме конструкторов, мы можем обратиться с помощью ключевого слова base к другим членам базового класса. 
 * В нашем случае вызов base.Print(); будет обращением к методу Print() в классе Person:
 *  public override void Print()
 *   {
 *       base.Print();
 *       Console.WriteLine($"работает в {Company}");
 *   }
 */

/*
 * Переопределение свойств.
 * Также как и методы, можно переопределять свойства:
 * В данном случае в классе Person определено виртуальное свойство Age, которое устанавливает значение, 
 * если оно больше 0 и меньше 110. В классе Employee это свойство переопределено - возраст работника должен 
 * быть не меньше 18.
 */
Person jim = new("Jim");
Console.WriteLine(jim.Age);     //  1
jim.Age = 120;                  //  Недопустимый возраст
Console.WriteLine(jim.Age);     //  1

Employee sara = new("Sara", 10, "7&7");
Console.WriteLine($"{sara.Name}, {sara.Age}, {sara.Company}");
sara.Age = 10;                  // Недопустимый возраст

/*
 * Запрет переопределения методов.
 * Можно запретить переопределять методы и свойства в этом случае их надо объявлять с модификатором sealed
 * При создании методов с модификатором sealed надо учитывать, что sealed применяется в паре с override, 
 * то есть только в переопределяемых методах.
 * И в этом случае мы не сможем переопределить метод Print в классе, унаследованном от Employee.
 */