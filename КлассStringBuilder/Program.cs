using System.Text;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/*
Хотя класс System.String предоставляет нам широкую функциональность по работе со
строками, все таки он имеет свои недостатки. Прежде всего, объект String 
представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод 
класса String, система создает новый объект в памяти с выделением ему достаточного
места. Удаление первого символа - не самая затратная операция. Однако когда подобных 
операций множество, а объем текста, для которого надо выполнить данные операции,
также не самый маленький, то издержки при потере производительности становятся
более существенными.

Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс StringBuilder, 
который находится в пространстве имен System.Text. Этот класс представляет динамическую
строку. 
*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Создание StringBuilder

/*
Для создания объекта StringBuilder можно использовать ряд его конструкторов. 
Прежде всего можно создать пустой StringBuilder:

using System.Text;
*/
StringBuilder sb = new StringBuilder();
/*
Можно сразу инициализировать объект определенной строкой:
*/

StringBuilder sb2 = new StringBuilder("Привет мир");

/* С помощью метода ToString() мы можем получить строку, которая хранится в
 StringBuilder:
*/

var sb3 = new StringBuilder("Hello World");
Console.WriteLine(sb.ToString());    //  Hello World
/* Либо можно просто передать объект StringBuilder:
*/
var sb4 = new StringBuilder("Hello World");
Console.WriteLine(sb4);    //  Hello World

#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Длина и емкость StringBuilder

/*
Для хранения длины строки в классе StringBuilder определенно свойство Length. Однако
есть и вторая величина - емкость выделенной памяти. Это значение хранится в свойстве 
Capacity. Емкость - это выделенная память под объект. Установка емкости позволяет 
уменьшить выделения памяти и тем самым повысить производительность.
Если строка, которая передается в конструктор StringBuilder, имеет длину 16 символов 
или меньше, то начальная ёмкость в StringBuilder равна 16. Если начальная строка
больше 16 символов, то в качестве начальной емкости StringBuilder будет использовать
длину строки.
Например, посмотрим, что содержат данные свойства:
*/
 
StringBuilder sb5 = new StringBuilder("Привет мир");
Console.WriteLine($"Длина: {sb5.Length}");       // Длина: 10
Console.WriteLine($"Емкость: {sb5.Capacity}");   // Емкость: 16

/* Хотя в данном случае длина равна 10 символов, но реально емкость будет составлять
по умолчанию 16 символов. То есть мы видим, что при создании строки StringBuilder 
выделяет памяти больше, чем необходимо этой строке. При увеличении строки в 
StringBuilder, когда количество символов превосходит начальную емкость, то 
емкость увеличивается в два и более раз.

Если у нас заранее известен максимальный размер объекта, то мы можем таким образом
сразу задать емкость с помощью одного из конструкторов и тем самым избежать 
последующих издержек при дополнительном выделении памяти.
*/

var sb6 = new StringBuilder(32);

/*
StringBuilder также позволяет сразу задать строку и емкость:
*/

var sb7 = new StringBuilder("Привет мир", 32);

#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Операции со строками в StringBuilder
#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */