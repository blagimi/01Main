using System.Text;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/*
Хотя класс System.String предоставляет нам широкую функциональность по работе со
строками, все таки он имеет свои недостатки. Прежде всего, объект String 
представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод 
класса String, система создает новый объект в памяти с выделением ему достаточного
места. Удаление первого символа - не самая затратная операция. Однако когда подобных 
операций множество, а объем текста, для которого надо выполнить данные операции,
также не самый маленький, то издержки при потере производительности становятся
более существенными.

Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс StringBuilder, 
который находится в пространстве имен System.Text. Этот класс представляет динамическую
строку. 
*/

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Создание StringBuilder

/*
Для создания объекта StringBuilder можно использовать ряд его конструкторов. 
Прежде всего можно создать пустой StringBuilder:

using System.Text;
*/
StringBuilder sb = new StringBuilder();
/*
Можно сразу инициализировать объект определенной строкой:
*/

StringBuilder sb2 = new StringBuilder("Привет мир");

/* С помощью метода ToString() мы можем получить строку, которая хранится в
 StringBuilder:
*/

var sb3 = new StringBuilder("Hello World");
Console.WriteLine(sb.ToString());    //  Hello World
/* Либо можно просто передать объект StringBuilder:
*/
var sb4 = new StringBuilder("Hello World");
Console.WriteLine(sb4);    //  Hello World

#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Длина и емкость StringBuilder
#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#region Операции со строками в StringBuilder
#endregion

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */