/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


#region Обработка ошибок и отмена операции


/*

При выполнении параллельных операций также могут возникать ошибки, обработка которых имеет 
свои особенности. При параллельной обработке коллекция разделяется а части, и каждая часть 
обрабатывается в отдельном потоке. Однако если возникнет ошибка в одном из потоков, то система 
прерывает выполнение всех потоков.

При генерации исключений все они агрегируются в одном исключении типа AggregateException

Например, пусть в метод факториала передается массив объектов, который содержит не только числа, 
но и строки:

*/

static void Example ()
{
    object[] numbers = new object[] { 1, 2, 3, 4, 5, "6" };

    var squares = from n in numbers.AsParallel()
                  let x = (int)n
                  select Square(x);
    try
    {
        squares.ForAll(n => Console.WriteLine(n));
    }
    catch (AggregateException ex)
    {
        foreach (var e in ex.InnerExceptions)
        {
            Console.WriteLine(e.Message);
        }
    }

    int Square(int n) => n * n;

}

Example();

/*

Запустим проект без отладки. И так как массив содержит строку, то попытка приведения закончится неудачей, 
и на консоль будет выведено сообщение об ошибке. При запуске приложения в Visual Studio в режиме отладки 
выполнение остановится на строке преобразования. А после продолжения также сработает перехват исключения 
в блоке catch, и на консоль будет выведено сообщение об ошибке.

*/


#endregion


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Console.ReadLine();

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */